package classes.TITSSaveEdit.Data 
{
	import classes.GLOBAL;
	import classes.TITSSaveEdit.Data.CoCTypeDefs;
	
	/**
	 * ...
	 * @author Gedan
	 */
	public class SEDataEditor 
	{
		public static function mergeData(tits:TiTsCharacterData, coc:CoCCharacterData):void
		{
			
		}
		
		// Conversion arrays
		// Format of "FromType : ToType"
		// From == all applicable CoC types for a slot.
		// To == closest available match (or fallback) available in TiTs
		
		private static var CONVERT_COCK_TYPES:Array;
		
		{
			CONVERT_COCK_TYPES = [];
			
			CONVERT_COCK_TYPES[CoCTypeDefs.COCK_TYPE_HUMAN] = GLOBAL.TYPE_HUMAN;
			CONVERT_COCK_TYPES[CoCTypeDefs.COCK_TYPE_EQUINE] = GLOBAL.TYPE_EQUINE;
			CONVERT_COCK_TYPES[CoCTypeDefs.COCK_TYPE_DOG] = GLOBAL.TYPE_CANINE;
			CONVERT_COCK_TYPES[CoCTypeDefs.COCK_TYPE_DEMON] = GLOBAL.TYPE_DEMONIC;
			CONVERT_COCK_TYPES[CoCTypeDefs.COCK_TYPE_TENTACLE] = GLOBAL.TYPE_TENTACLE;
			CONVERT_COCK_TYPES[CoCTypeDefs.COCK_TYPE_CAT] = GLOBAL.TYPE_FELINE;
			CONVERT_COCK_TYPES[CoCTypeDefs.COCK_TYPE_LIZARD] = GLOBAL.TYPE_DRACONIC; // Closest match
			CONVERT_COCK_TYPES[CoCTypeDefs.COCK_TYPE_ANEMONE] = GLOBAL.TYPE_ANEMONE;
			CONVERT_COCK_TYPES[CoCTypeDefs.COCK_TYPE_KANGAROO] = GLOBAL.TYPE_KANGAROO;
			CONVERT_COCK_TYPES[CoCTypeDefs.COCK_TYPE_DRAGON] = GLOBAL.TYPE_DRACONIC;
			CONVERT_COCK_TYPES[CoCTypeDefs.COCK_TYPE_DISPLACER] = GLOBAL.TYPE_HUMAN; // Total fallback
			CONVERT_COCK_TYPES[CoCTypeDefs.COCK_TYPE_FOX] = GLOBAL.TYPE_CANINE; // Closest match
			CONVERT_COCK_TYPES[CoCTypeDefs.COCK_TYPE_UNDEFINED] = GLOBAL.TYPE_HUMAN; // kek "Enum"
		}
		
		private static const CONVERT_SKIN_TYPES:Array;
		
		{
			CONVERT_SKIN_TYPES = [];
			
			CONVERT_SKIN_TYPES[CoCTypeDefs.SKIN_TYPE_PLAIN] = GLOBAL.SKIN_TYPE_SKIN;
			CONVERT_SKIN_TYPES[CoCTypeDefs.SKIN_TYPE_FUR] = GLOBAL.SKIN_TYPE_FUR;
			CONVERT_SKIN_TYPES[CoCTypeDefs.SKIN_TYPE_GOO] = GLOBAL.SKIN_TYPE_GOO;
			CONVERT_SKIN_TYPES[CoCTypeDefs.SKIN_TYPE_SCALES] = GLOBAL.SKIN_TYPE_SCALES;
			CONVERT_SKIN_TYPES[CoCTypeDefs.SKIN_TYPE_UNDEFINED] = GLOBAL.SKIN_TYPE_SKIN;
		}
		
		private static const CONVERT_TAIL_TYPES:Array;
		
		{
			CONVERT_TAIL_TYPES = [];
			
		CONVERT_TAIL_TYPES[CoCTypeDefs.TAIL_TYPE_NONE] = 0;
		CONVERT_TAIL_TYPES[CoCTypeDefs.TAIL_TYPE_HORSE] = GLOBAL.TYPE_EQUINE;
		CONVERT_TAIL_TYPES[CoCTypeDefs.TAIL_TYPE_DOG] = GLOBAL.TYPE_CANINE;
		CONVERT_TAIL_TYPES[CoCTypeDefs.TAIL_TYPE_DEMONIC] = GLOBAL.TYPE_DEMONIC;
		CONVERT_TAIL_TYPES[CoCTypeDefs.TAIL_TYPE_COW] = GLOBAL.TYPE_BOVINE;
		CONVERT_TAIL_TYPES[CoCTypeDefs.TAIL_TYPE_SPIDER_ADBOMEN] = GLOBAL.TYPE_ARACHNID;
		CONVERT_TAIL_TYPES[CoCTypeDefs.TAIL_TYPE_BEE_ABDOMEN] = GLOBAL.TYPE_BEE;
		CONVERT_TAIL_TYPES[CoCTypeDefs.TAIL_TYPE_SHARK] = GLOBAL.TYPE_SHARK;
		CONVERT_TAIL_TYPES[CoCTypeDefs.TAIL_TYPE_CAT] = GLOBAL.TYPE_FELINE;
		CONVERT_TAIL_TYPES[CoCTypeDefs.TAIL_TYPE_LIZARD] = GLOBAL.TYPE_LIZAN;
		CONVERT_TAIL_TYPES[CoCTypeDefs.TAIL_TYPE_RABBIT] = GLOBAL.TYPE_PANDA; // I guess its kinda close enough?
		CONVERT_TAIL_TYPES[CoCTypeDefs.TAIL_TYPE_HARPY] = GLOBAL.TYPE_AVIAN;
		CONVERT_TAIL_TYPES[CoCTypeDefs.TAIL_TYPE_KANGAROO] = GLOBAL.TYPE_KANGAROO;
		CONVERT_TAIL_TYPES[CoCTypeDefs.TAIL_TYPE_FOX] = GLOBAL.TYPE_VULPINE;
		CONVERT_TAIL_TYPES[CoCTypeDefs.TAIL_TYPE_DRACONIC] = GLOBAL.TYPE_DRACONIC;
		CONVERT_TAIL_TYPES[CoCTypeDefs.TAIL_TYPE_RACCOON] = 0;
		CONVERT_TAIL_TYPES[CoCTypeDefs.TAIL_TYPE_MOUSE] = GLOBAL.TYPE_MOUSE;
		CONVERT_TAIL_TYPES[CoCTypeDefs.TAIL_TYPE_FERRET] = 0;
		}
		
		private static const CONVERT_TONGUE_TYPES:Array;
		private static const CONVERT_WING_TYPES:Array;
		private static const CONVERT_ARM_TYPES:Array;
		private static const CONVERT_EYE_TYPES:Array;
		private static const CONVERT_FACE_TYPES:Array;
		private static const CONVERT_HAIR_TYPES:Array;
		private static const CONVERT_HORN_TYPES:Array;
		private static const CONVERT_EAR_TYPES:Array;
		
		
	}

}